<div class="row">
  <h3 id="crime-count"><%= @count %> <%= "crime".pluralize(@count) %> reported in 2016 in London</h3>

  <div class="col-md-6">
    <%= button_tag 'Filter', class: 'crime-filter-button' %>

    <div id="crime-filter">
      <div id="crime-filter-categories">
        <h4>Categories</h4>
        <div class="form-group">
          <% @categories.each do |category| %>
            <%= label_tag "category_#{category.parameterize(separator: '_')}" do %>
              <%= check_box_tag "category[]", category, false, :id => "category_#{category.parameterize(separator: '_')}" %> <%= category %>
            <% end %>
          <% end %>
        </div>
      </div>

      <div id="crime-filter-outcomes">
        <h4>Outcomes</h4>
        <div class="form-group">
          <% @outcomes.each do |outcome| %>
            <%= label_tag "outcome_#{outcome.parameterize(separator: '_')}" do %>
              <%= check_box_tag "outcome[]", outcome, false, :id => "outcome_#{outcome.parameterize(separator: '_')}" %> <%= outcome %>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>

    <%= button_tag 'Filter', class: 'crime-filter-button' %>
  </div>

  <div class="col-md-6">
    <div id="d3"></div>
  </div>
</div>



<style>
  #d3 svg {
    border: 1px solid black;
    margin: 30px 0;
    padding: 30px;
  }
</style>

<script>
  $('.crime-filter-button').click(function(e) {
    var checkedCategories = [],
        checkedOutcomes = [];

    e.preventDefault();

    checkedCategories = $.map($('#crime-filter-categories').find('input[type=checkbox]:checked'), function(elem) { return $(elem).val(); });
    checkedOutcomes = $.map($('#crime-filter-outcomes').find('input[type=checkbox]:checked'), function(elem) { return $(elem).val(); });

    $.getJSON(
      '<%= crimes_path %>', {category: checkedCategories, outcome: checkedOutcomes}
    ).done(function(data) {
      var totalCount = data.totalCount;
      var breakdowns = data.breakdowns;

      $('#crime-count').text(totalCount +
          (totalCount == 1 ? " crime" : " crimes") +
          " reported in 2016 in London");

      var svg;

      if ($("#d3 svg").length) {
        var svg = d3.select("#d3 svg");
      } else {
        var svg = d3.select("#d3")
          .append("svg")
          .attr("width", 120 + 2 + (data.breakdowns.length - 1) * 22)
          .attr("height", 330);
      }

      breakdownMonths = $.map(breakdowns, function(arr) { return arr[0] });
      breakdownValues = $.map(breakdowns, function(arr) { return arr[1] });

      var maxValue = Math.max.apply(Math, breakdownValues);

      var barX = function(d, i) { return (i * 22); };
      var barY = function(d, i) { return (200 - (d / maxValue * 200)); };
      var barHeight = function(d) { return (d / maxValue * 200); };
      var barWidth = 20;

      bars = svg.selectAll("rect")
        .data(breakdownValues);

      bars.exit().transition().attr("height", 0).remove();

      bars.enter()
        .append("rect")
        .attr("x", barX)
        .attr("y", 200)
        .attr("width", barWidth)
        .attr("height", 0)
        .transition()
        .attr("height", barHeight)
        .attr("y", barY)
        .attr("fill", function(v) { return "rgb(" + (v / parseFloat(maxValue) * 255) + "," + ((maxValue - v) / parseFloat(maxValue) * 255) + ",0)" });

      bars.attr("x", barX)
        .attr("width", barWidth)
        .transition()
        .attr("height", barHeight)
        .attr("y", barY)
        .attr("fill", function(v) { return "rgb(" + (v / parseFloat(maxValue) * 255) + "," + ((maxValue - v) / parseFloat(maxValue) * 255) + ",0)" });

      text = svg.selectAll("text.x-label")
        .data(breakdownMonths);

      text.exit().remove();

      textRotate = function(d, i) { return "rotate(45," + (barX(d, i) - 22) + ",200)"; };
      textX = function(d, i) { return 10 + barX(d, i); };

      text.enter()
        .append("text")
        .attr("x", textX)
        .attr("y", 190)
        .attr("transform", textRotate)
        .attr("style", "font-family: 'Arial'; font-size: 12px;")
        .attr("class", "x-label")
        .text(function(d) { return d });

      text.attr("x", textX)
        .attr("y", 190)
        .attr("transform", textRotate)
        .attr("style", "font-family: 'Arial'; font-size: 12px;")
        .attr("class", "x-label")
        .text(function(d) { return d });

    label = svg.selectAll("text.val-label")
      .data(breakdownValues);

    label.exit().remove();

    label.enter()
      .append("text")
      .attr("x", function(d, i) { return 10 + barX(d, i); })
      .attr("y", function(d) { return (-5 + (200 - d / maxValue * 200)); })
      .attr("style", "font-family: 'Arial'; font-size: 6px;")
      .attr("class", "val-label")
      .attr("text-anchor", "middle")
      .text(function(d) { return d });

    label.attr("x", function(d, i) { return 10 + barX(d, i); })
      .attr("style", "font-family: 'Arial'; font-size: 6px;")
      .attr("class", "val-label")
      .attr("text-anchor", "middle")
      .text(function(d) { return d })
      .transition()
      .attr("y", function(d) { return (-5 + (200 - d / maxValue * 200)); });
    });
  });
</script>
